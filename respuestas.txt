
21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?
	Con comillas dobles imprime el primero, en el segundo, con comillas simples pone los tabuladores delante.

22. ¿Como funciona %q? 
	Imprime la cadena pero con 2 tabuladores
    ¿Ques %q{hello world\n}? 
	=> "hello world\\n"
    ¿Ques %q{’a’ ’b’ ’c’}?
	=> "'a'b''c'\\n" 

23. ¿Como funciona %Q? 
	Imprime pero con un tabulador 	
    ¿Ques %Q{hello world\n}? 
	 => "hello world\n" 
    ¿Ques %Q{"a" "b" "c"}?
	 => "'a'b''c'\n" 

24. ¿Qué queda en c?
	En 'c' se guardaran todos los valores numericos de a y b.

25.¿Qué queda en c?
	En 'c' se guardaran todos los valores que escribamos entre los dos HERE, en este caso sera --#{a}-- y --#{b}--.

26. s = "hello". ¿Cual es el valor de las siguientes expresiones?
	s[0,2]
	  => "he" 
	s[-1,1]
	  => "he" 
	s[0,10]
          => "hello" 

27. ¿Que queda en g?
	 => "helloworld" 
 
28. ¿Que queda en e?
 	=> "..." 
 
29. ¿Cual es el resultado?
	=> "2 2 2 " 
 
30. ¿Qué́ es esto? %w[this is a test]
 	=> ["this", "is", "a", "test"]. Separa las frases del mismo conjunto
 
31. ¿Qué es esto? %w[\t \n]
	=> ["\\t\\n"] 

32. ¿Qué es esto? %W[\t \n]
	=> ["\t\n"] 
 
33. ¿Qué́ contiene nils? nils = Array.new(3)
	=> [nil, nil, nil] 
 
34. ¿Qué́ contiene zeros? zeros = Array.new(3, 0)
	=> [0, 0, 0] 
 
35. ¿Qué queda en b? 
	=> [[1, 2], [3, 4]] 
 
36. ¿Qué́ queda en c?
	=> [0, 2, 4]
 
37. ¿Cual es el resultado de cada una de estas operaciones?
	a = (’a’..’e’).to_a
	["a", "b", "c", "d", "e"]
	a[1,1]
	 => ["b"] 
	a[-2,2]
	 => ["d", "e"] 
	a[0..2]
	 => ["a", "b", "c"] 
	a[0...1]
	 => ["a"] 
	a[-2..-1]
	 => ["d", "e"] 
 
38. ¿Cual es el resultado de cada una de estas operaciones?
	a
	 => ["a", "b", "c", "d", "e"]
	a[0,2] = %w{A B}
         => ["A", "B"]
	a
         => ["A", "B", "c", "d", "e"] 
        a[2..5] = %w{C D E}
         => ["C", "D", "E"]
	a
	 => ["A", "B", "C", "D", "E"] 
 	a[0,0] = [1,2,3]
	 => [1, 2, 3]
	a
	 => [1, 2, 3, "A", "B", "C", "D", "E"] 
	a[0,2] = []
	 => []
	a
	 => [3, "A", "B", "C", "D", "E"] 
	a[-1,1] = [ ’Z’ ]
	 => ["Z"]
	a
	 => [3, "A", "B", "C", "D", "Z"] 
	a[-2,2] = nil
	 => nil
	a
	 => [3, "A", "B", "C", nil] 

39. ¿Cuál es el resultado de cada una de estas operaciones?
	a = (1...4).to_a
	 => [1, 2, 3] 
	a = a + [4, 5]
	 => [1, 2, 3, 4, 5] 
	a += [[6, 7, 8]]
	 => [1, 2, 3, 4, 5, [6, 7, 8]] 
	a = a + 9
	TypeError: no implicit conversion of Fixnum into Array
		from (irb#1):64:in `+'
		from (irb#1):64

40. ¿Cual es el resultado de cada una de estas operaciones?
	x = %w{a b c b a}
	 => ["a", "b", "c", "b", "a"]
	x = x - %w{b c d}
	 => ["a", "a"]

41. ¿Cual es el resultado de cada una de estas operaciones?
	z = [0]*8
	 => [0, 0, 0, 0, 0, 0, 0, 0]

42. ¿Cu ́al es el resultado de cada una de estas operaciones?
	a= []
	 => []
	a << 1
	 => [1]
	a << 2 << 3
	 => [1, 2, 3]
	a << [4, 5, 6]
	 => [1, 2, 3, [4, 5, 6]]
	a.concat [7, 8]
	 => [1, 2, 3, [4, 5, 6], 7, 8]


43. ¿Cual es el resultado de cada una de estas operaciones?
	a = [1, 1, 2, 2, 3, 3, 4]
	 => [1, 1, 2, 2, 3, 3, 4]
	b = [5, 5, 4, 4, 3, 3, 2]
	 => [5, 5, 4, 4, 3, 3, 2]
	c = a | b
	 => [1, 2, 3, 4, 5]
	d = b | a
	 => [5, 4, 3, 2, 1]
	e = a & b
	 => [2, 3, 4]
	f = b & a
	 => [4, 3, 2]

44. ¿Qu ́e resultados dan las siguientes operaciones?
	a = 1..10
	 => 1..10
	a.class
	 => Range
	a.to_a
	 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
	b = 1...10
	 => 1...10
	b.to_a
	 => [1, 2, 3, 4, 5, 6, 7, 8, 9]
	b.include? 10
   	 => false
	b.include? 8
	 => true
	b.step(2) {|x| print "#{x} " }
	 => 1 3 5 7 9 => 1...10
	1..3.to_a
	 ERROR

45. ¿Que resultados dan las siguientes operaciones?
	r = 0...100
	 => 0....100
	r.member? 50
 	 => true
	r.include? 99.9
	 => true
	r.member? 99.9
	 => true

46. ¿Que resultados dan las siguientes operaciones?
	true.class
	 => TrueClass
	false.class
	 => FalseClass
	puts "hello" if 0
	 hello
	 => nil
	puts "hello" if nil
	 => nil
	puts "hello" if ""
	 hello
	 => nil

47. ¿Que resultados dan las siguientes operaciones?
	x = :sym
	 => :sym
	x.class
 	 => Symbol
	x == ’sym’
	 => false
	x == :sym
	 => true
	z = :’a long symbol’
	 => :"a long symbol"
	z.class
	 => Symbol
	x == ’sym’.to_sym
	 => true
	x.to_s == ’sym’
	 => true

48. ¿Qu ́e resultados se dan?
	s = "Ruby"
	 => "Ruby
	t = s
	 => "Ruby"
	t[-1] = ""
	 => ""
	print s
 	 => Rub=> nil
	t = "Java"
	 => "Java"
	print s, t
	 => RubJava=> nil

49. ¿Cu ́al es el resultado?
	"%d %s" % [3, "rubies"]
	 => "3 rubies"

50. ¿Cu ́ales son los resultados?
	x, y = 4, 5
	 => [4, 5]
	z = x > y ? x : y
	 => 5
	x,y,z = [1,2,3]
	 => [1,2,3]

51. ¿Qu ́e resultados dan las siguientes operaciones?
	x = { :a => 1, :b => 2 }
	 => {:b=>2, :a=>1}
	x.keys
	 => [:b, :a]
	x.values
	 => [2, 1]	
	x[:c] = 3
	 => 3
	x
	 => {:b=>2, :c=>3, :a=>1}
	x.delete(’a’)
	 => nil
	x
	 => {:b=>2, :c=>3, :a=>1}
	x.delete(:a)
	 => 1
	x
	 => {:b=>2, :c=>3}
	x = { :a => 1, :b => 2, :c => 4 }
	 => {:b=>2, :c=>4, :a=>1}
	x.delete_if { |k,v| v % 2 == 0 }
	 => {:a=>1}
	x
	 => {:a=>1}

52. ¿Que hace yield 4, 5?

53. ¿Que hace la siguiente sentencia? counts = Hash.new(0) ¿Que diferencia hay con la asignacion counts = {}?
	Ambas sentencias crean lo mismo => {}, la diferencia 

54. ¿Que retorna esta expresion?’hello world, hello LPP’.scan /\w+/
	["hello", "world", "hello", "LPP"]

55. Explique que hacen estas sentencias:
	c = { :a => 3, :b => 2, :c => 1 }
	 => {:b=>2, :c=>1, :a=>3}
	c.keys.sort.each { |k| puts c[k] }
	=> 3 2 1























